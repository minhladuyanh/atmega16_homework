
USART_Atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071f  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000657  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   8:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  10:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  14:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  18:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  1c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  20:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  24:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  28:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_11>
  30:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  34:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  38:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  3c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  40:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  44:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  48:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  50:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  54:	66 00       	.word	0x0066	; ????
  56:	69 00       	.word	0x0069	; ????
  58:	6c 00       	.word	0x006c	; ????
  5a:	6f 00       	.word	0x006f	; ????
  5c:	72 00       	.word	0x0072	; ????
  5e:	75 00       	.word	0x0075	; ????
  60:	78 00       	.word	0x0078	; ????
  62:	7b 00       	.word	0x007b	; ????
  64:	7e 00       	.word	0x007e	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61
  72:	0e 94 49 00 	call	0x92	; 0x92 <main>
  76:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007a <__bad_interrupt>:
  7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007e <_Z10USART_initv>:
	}
}
void usart_recived()
{
	while((UCSRA&(1<<RXC))==0);
}
  7e:	10 bc       	out	0x20, r1	; 32
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	89 b9       	out	0x09, r24	; 9
  84:	1b b8       	out	0x0b, r1	; 11
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
  8a:	88 e9       	ldi	r24, 0x98	; 152
  8c:	8a b9       	out	0x0a, r24	; 10
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <main>:
int main(void)
{
	USART_init();
  92:	0e 94 3f 00 	call	0x7e	; 0x7e <_Z10USART_initv>
	DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  9a:	18 ba       	out	0x18, r1	; 24
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0xa>

0000009e <__vector_11>:
    {
		
    }
}
ISR(USART_RXC_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	char pc = UDR;
  b4:	ec b1       	in	r30, 0x0c	; 12
	switch(pc)
  b6:	8e 2f       	mov	r24, r30
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	f0 97       	sbiw	r30, 0x30	; 48
  be:	e9 30       	cpi	r30, 0x09	; 9
  c0:	f1 05       	cpc	r31, r1
  c2:	f8 f4       	brcc	.+62     	; 0x102 <__vector_11+0x64>
  c4:	e6 5d       	subi	r30, 0xD6	; 214
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__tablejump2__>
	{
		case '0': PORTB = 0b00000001;break;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	19 c0       	rjmp	.+50     	; 0x104 <__vector_11+0x66>
		case '1': PORTB = 0b00000010;break;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	16 c0       	rjmp	.+44     	; 0x104 <__vector_11+0x66>
		case '2': PORTB = 0b00000100;break;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	88 bb       	out	0x18, r24	; 24
  dc:	13 c0       	rjmp	.+38     	; 0x104 <__vector_11+0x66>
		case '3': PORTB = 0b00001000;break;
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	10 c0       	rjmp	.+32     	; 0x104 <__vector_11+0x66>
		case '4': PORTB = 0b00010000;break;
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	0d c0       	rjmp	.+26     	; 0x104 <__vector_11+0x66>
		case '5': PORTB = 0b00100000;break;
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	0a c0       	rjmp	.+20     	; 0x104 <__vector_11+0x66>
		case '6': PORTB = 0b01000000;break;
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	07 c0       	rjmp	.+14     	; 0x104 <__vector_11+0x66>
		case '7': PORTB = 0b10000000;break;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_11+0x66>
		case '8': PORTB = 0b11111111;break;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	88 bb       	out	0x18, r24	; 24
 100:	01 c0       	rjmp	.+2      	; 0x104 <__vector_11+0x66>
		default:PORTB = 0b00000000;break;
 102:	18 ba       	out	0x18, r1	; 24
	}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__tablejump2__>:
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	05 90       	lpm	r0, Z+
 120:	f4 91       	lpm	r31, Z
 122:	e0 2d       	mov	r30, r0
 124:	09 94       	ijmp

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
