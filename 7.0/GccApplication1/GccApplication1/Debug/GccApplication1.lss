
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ba  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c9  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   8:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
   c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  10:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  14:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  18:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  1c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  20:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  24:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  28:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  30:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  34:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  38:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  3c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  40:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  44:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  48:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  4c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  50:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__bad_interrupt>
  54:	59 00       	.word	0x0059	; ????
  56:	5b 00       	.word	0x005b	; ????
  58:	5f 00       	.word	0x005f	; ????
  5a:	63 00       	.word	0x0063	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	6b 00       	.word	0x006b	; ????
  60:	6f 00       	.word	0x006f	; ????
  62:	73 00       	.word	0x0073	; ????
  64:	77 00       	.word	0x0077	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61
  72:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  76:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007a <__bad_interrupt>:
  7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007e <main>:
#include <util/delay.h>

int main()
{
    /* Replace with your application code */
	DDRA = 0b11111111;//set chân A là output
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;//set chan A la 0V
  82:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0x00;//set chân b là input
  84:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;//set chan b la 5v
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	88 bb       	out	0x18, r24	; 24
	int button =0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
	while(1){
		if((PINB & (1<<PINB0))==0){
  8e:	b0 99       	sbic	0x16, 0	; 22
  90:	08 c0       	rjmp	.+16     	; 0xa2 <main+0x24>
		    while((PINB & (1<<PINB0))==0){
  92:	b0 9b       	sbis	0x16, 0	; 22
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x14>
		    }
			button++;
  96:	01 96       	adiw	r24, 0x01	; 1
			if(button>8){
  98:	89 30       	cpi	r24, 0x09	; 9
  9a:	91 05       	cpc	r25, r1
  9c:	14 f0       	brlt	.+4      	; 0xa2 <main+0x24>
				button=0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		switch(button){
  a2:	89 30       	cpi	r24, 0x09	; 9
  a4:	91 05       	cpc	r25, r1
  a6:	98 f7       	brcc	.-26     	; 0x8e <main+0x10>
  a8:	fc 01       	movw	r30, r24
  aa:	e6 5d       	subi	r30, 0xD6	; 214
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__tablejump2__>
			case 0:PORTA = 0b00000000;break;
  b2:	1b ba       	out	0x1b, r1	; 27
  b4:	ec cf       	rjmp	.-40     	; 0x8e <main+0x10>
			case 1:PORTA = PORTA | (1<<0);break;
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	21 60       	ori	r18, 0x01	; 1
  ba:	2b bb       	out	0x1b, r18	; 27
  bc:	e8 cf       	rjmp	.-48     	; 0x8e <main+0x10>
			case 2:PORTA = PORTA | (1<<1);break;
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	22 60       	ori	r18, 0x02	; 2
  c2:	2b bb       	out	0x1b, r18	; 27
  c4:	e4 cf       	rjmp	.-56     	; 0x8e <main+0x10>
			case 3:PORTA = PORTA | (1<<2);break;
  c6:	2b b3       	in	r18, 0x1b	; 27
  c8:	24 60       	ori	r18, 0x04	; 4
  ca:	2b bb       	out	0x1b, r18	; 27
  cc:	e0 cf       	rjmp	.-64     	; 0x8e <main+0x10>
			case 4:PORTA = PORTA | (1<<3);break;
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	28 60       	ori	r18, 0x08	; 8
  d2:	2b bb       	out	0x1b, r18	; 27
  d4:	dc cf       	rjmp	.-72     	; 0x8e <main+0x10>
			case 5:PORTA = PORTA | (1<<4);break;
  d6:	2b b3       	in	r18, 0x1b	; 27
  d8:	20 61       	ori	r18, 0x10	; 16
  da:	2b bb       	out	0x1b, r18	; 27
  dc:	d8 cf       	rjmp	.-80     	; 0x8e <main+0x10>
			case 6:PORTA = PORTA | (1<<5);break;
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	20 62       	ori	r18, 0x20	; 32
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	d4 cf       	rjmp	.-88     	; 0x8e <main+0x10>
			case 7:PORTA = PORTA | (1<<6);break;
  e6:	2b b3       	in	r18, 0x1b	; 27
  e8:	20 64       	ori	r18, 0x40	; 64
  ea:	2b bb       	out	0x1b, r18	; 27
  ec:	d0 cf       	rjmp	.-96     	; 0x8e <main+0x10>
			case 8:PORTA = PORTA | (1<<7);break;
  ee:	2b b3       	in	r18, 0x1b	; 27
  f0:	20 68       	ori	r18, 0x80	; 128
  f2:	2b bb       	out	0x1b, r18	; 27
  f4:	cc cf       	rjmp	.-104    	; 0x8e <main+0x10>

000000f6 <__tablejump2__>:
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	05 90       	lpm	r0, Z+
  fc:	f4 91       	lpm	r31, Z
  fe:	e0 2d       	mov	r30, r0
 100:	09 94       	ijmp

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
