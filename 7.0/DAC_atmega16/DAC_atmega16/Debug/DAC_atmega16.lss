
DAC_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000636  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dd  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z8ADC_inith>:

unsigned int input_value;

void ADC_init(unsigned char x)
{
	ADMUX = x | Vref;
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
  80:	8b ec       	ldi	r24, 0xCB	; 203
  82:	86 b9       	out	0x06, r24	; 6
	sei();
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <_Z8PWM_initv>:
}
void PWM_init()
{
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<CS01);
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	8b 66       	ori	r24, 0x6B	; 107
  8c:	83 bf       	out	0x33, r24	; 51
  8e:	08 95       	ret

00000090 <main>:
}

int main(void)
{
	
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bb       	out	0x17, r24	; 23
    DDRA =0x00;
  94:	1a ba       	out	0x1a, r1	; 26
	ADC_init(4);
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z8ADC_inith>
	PWM_init();
  9c:	0e 94 44 00 	call	0x88	; 0x88 <_Z8PWM_initv>
    while(1)
	{
		PORTB |= (1<<PINB2);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	88 bb       	out	0x18, r24	; 24
		PORTB ^= (1<<PINB1);
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	89 27       	eor	r24, r25
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	f8 cf       	rjmp	.-16     	; 0xa0 <main+0x10>

000000b0 <__vector_14>:
    }
}
ISR(ADC_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	PORTB &= ~(1<<PINB2);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	88 bb       	out	0x18, r24	; 24
	OCR0 = (int)ADCW;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	8c bf       	out	0x3c, r24	; 60
	ADCSRA |= (1<<ADSC);
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	86 b9       	out	0x06, r24	; 6
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
